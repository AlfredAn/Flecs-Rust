[package]
name = "flecs_ecs"
version = "0.0.2"
edition.workspace = true
license.workspace = true
repository.workspace = true
authors = ["Indra de Backere <debackere.indra@gmail.com>"]
description = "Rust API for the C/CPP flecs ECS library <https://github.com/SanderMertens/flecs>"
keywords = ["ecs", "flecs", "entity-component-system", "game-development", "gamedev", "simulation", "performance", "game-engine"]
categories = ["game-development", "api-bindings", "simulation", "development-tools::game-engines", "data-structures"]

[dependencies]
flecs_ecs_derive = { path = "../flecs_ecs_derive" }
flecs_ecs_sys = { path = "../flecs_ecs_sys" }


[dev-dependencies]
criterion = "0.5.1"
seq-macro = "0.3.5"
rand = "0.8.5" 
ctor = "0.2.7"

[[bench]]
name = "query"
harness = false

[features]
flecs_app = []
flecs_pipeline = []
flecs_system = []
flecs_rules = []
flecs_timer = []
flecs_doc = []
flecs_rest = []
flecs_meta = []
flecs_metrics = []
flecs_ecs_asserts = []
flecs_enable_all_asserts = ["flecs_ecs_asserts"]
flecs_regenerate_binding = ["flecs_ecs_sys/flecs_regenerate_binding"]

# Enabling this will not build a copy of flecs into this library.
# Instead, the executable that this is linked with will need to
# provide the symbols required. This is useful when using both
# Rust and C++ code in an application and a copy of flecs is
# already being linked into the executable via other means.
flecs_disable_build_c_library = ["flecs_ecs_sys/flecs_disable_build_c_library"]

default = [
    
    "flecs_enable_all_asserts",
    "flecs_system",
    "flecs_timer",
    "flecs_doc",
    "flecs_rest",
    "flecs_meta",
    "flecs_metrics",
    "flecs_rules",
    "flecs_app",
    "flecs_pipeline",
]

[target.'cfg(any())'.dependencies]
flecs_ecs_derive = { version = "=0.1.0", path = "../flecs_ecs_derive" }
flecs_ecs_sys = { version = "=0.1.0", path = "../flecs_ecs_sys" }
